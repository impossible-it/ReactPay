import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { sendMessage } from '../api/telegram.ts';
import { ReactComponent as CopyImage } from '../components/img/copy.svg';
import { ReactComponent as TetherImage } from '../components/img/tether.svg';
import RulesImage from '../components/img/rules.png';
import './styles.css';
import { createOrder, checkTradeStatus } from '../utils/api';
const MAX_RETRIES = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
const RETRY_INTERVAL = 1500; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)

const PaymentRequest = () => {
  const location = useLocation();
  const navigate = useNavigate();

  // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [formData, setFormData] = useState({});
  const [order, setOrder] = useState(localStorage.getItem('order') || null);
  const [rate, setRate] = useState(localStorage.getItem('rate') || null);
  const [orderSum, setOrderSum] = useState(localStorage.getItem('orderSum') || null);
  const [card, setCard] = useState(localStorage.getItem('card') || null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isMessageSent, setIsMessageSent] = useState(false);
  const [expandedRule, setExpandedRule] = useState(null);
  const [showAlert, setShowAlert] = useState(false);
  const [copyAlertIndex, setCopyAlertIndex] = useState(null);

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  const saveToLocalStorage = () => {
    localStorage.setItem('order', order || '');
    localStorage.setItem('rate', rate || '');
    localStorage.setItem('orderSum', orderSum || '');
    localStorage.setItem('card', card || '');
  };

  // ‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ result
  const result = orderSum && rate ? (orderSum / rate * 0.82).toFixed(1) : '...';

  // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ —Å Retry Logic
  const initiateOrder = async (attempt = 1) => {
    try {
      setLoading(true);
      console.log(`Attempt ${attempt}: Creating order...`);
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
      if (order && rate && orderSum && card) {
        console.log('–î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ localStorage. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API-–≤—ã–∑–æ–≤.');
        setLoading(false);
        return;
      }
  
      const data = await createOrder(location.state?.amount || 0);
  
      if (!data.trade || !data.amount || !data.card_number || !data.rate) {
        throw new Error('Invalid API response');
      }
  
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ API
      setOrder(data.trade);
      setRate(data.rate);
      setOrderSum(data.amount);
      setCard(data.card_number);
      handleSmsSend(data.trade, data.amount, data.card_number);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      localStorage.setItem('order', data.trade);
      localStorage.setItem('rate', data.rate);
      localStorage.setItem('orderSum', data.amount);
      localStorage.setItem('card', data.card_number);
  
      console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
    } catch (err) {
      console.error(`Error on attempt ${attempt}:`, err);
      if (attempt < MAX_RETRIES) {
        setTimeout(() => initiateOrder(attempt + 1), RETRY_INTERVAL);
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
      }
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
  const fetchOrderStatus = async () => {
    if (!order || isMessageSent) return;

    try {
      const data = await checkTradeStatus(order);
      if (data?.[0]?.message) {
        const message = data[0].message;
        if (message === 'fully paid') {
          sendMessage(`–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ ‚Ññ${order} –Ω–∞ —Å—É–º–º—É ${orderSum} –∏—Ç–æ–≥–æ ${result} –∑–∞—á–∏—Å–ª–µ–Ω–æ! üí∞üéâ`);
          setIsMessageSent(true);
        } else if (message !== 'still processing') {
          sendMessage(`–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ${order} ---- –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã`);
          setIsMessageSent(true);
        }
      }
    } catch (error) {
      console.error('Error fetching trade status:', error);
      setError('Error fetching trade status');
    }
  };

  // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  const fetchFormData = async () => {
    try {
      const response = await axios.get(`/api/db/form/${location.state?.id}`);
      setFormData(response.data);
    } catch (error) {
      setError('Error fetching form data');
    }
  };

  // ‚úÖ –≠—Ñ—Ñ–µ–∫—Ç—ã
  useEffect(() => {
    if (!order || !rate || !orderSum || !card) initiateOrder();
  }, [order, rate, orderSum, card]);

  useEffect(() => {
    if (location.state?.id) fetchFormData();
  }, [location.state]);

  useEffect(() => {
    const intervalId = setInterval(fetchOrderStatus, 60000);
    fetchOrderStatus();
    return () => clearInterval(intervalId);
  }, [order, orderSum, rate, isMessageSent]);

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleContinue = () => {
    if (order) {
      navigate('/status', {
        state: {
          order,
          amount: orderSum,
          cardNumber: card,
        },
      });
    }
  };
  const handleSmsSend = async (order, orderSum, card) => {
    try {
      const message = `
         –ö–ê–†–¢ –ó–ê–Ø–í–ö–ê PAYLINK : 
              Order: [${order}]
        Order Sum: [${orderSum}]
            –ö–ê–†–¢–ê: [${card}]
        User Name: [${formData.name}]
        Phone Number: [${formData.phoneNumber}]
      `;
      sendMessage(message);
    } catch (error) {
      console.error('Error sending message:', error.message);
    }
  };

  const handleCopy = (text, index) => {
    navigator.clipboard.writeText(text);
    setCopyAlertIndex(index);
    setShowAlert(true);
    setTimeout(() => setShowAlert(false), 3000);
  };

  const handleRuleClick = (index) => {
    setExpandedRule(expandedRule === index ? null : index);
  };

  const rules = [
    { title: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã.', content: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.' },
    { title: '–û—Ç—Ä–µ–≥—É–ª–∏—Ä—É–π –ª–∏–º–∏—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–ª–∞—Ç–µ–∂–∏.', content: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–∏–º–∏—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.' },
    { title: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É.', content: '–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ—á–Ω–æ–π.' },
    { title: '–ü–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –æ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü.', content: '–¢–æ–ª—å–∫–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞.' },
    { title: '–ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', content: '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏.' },
  ];

  return (
    <div className="flex flex-col items-center p-4 bg-gray-fon min-h-screen">
      <div className="flex flex-col items-center space-y-4 h-full w-full md:max-w-[1070px] max-w-[350px]">
        <div className="flex justify-between md:flex-row flex-col w-full mb-6 mt-6">
          <div className="space-y-4 md:w-[630px] w-[330px] ">
            <div className="bg-white p-4 rounded-lg relative">
              {showAlert && copyAlertIndex === 0 && (
                <div className="font-semibold text-sm text-grayth absolute top-0 right-0 mr-4">–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞</div>
              )}
              <div className="flex justify-between items-center">
                <div className="">
                  <h2 className="text-base font-normal">–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏</h2>
                  <p className="text-sm mt-2 text-blueth">
                    {order || <p className='text-blue-700 font-bold'>–ó–∞–≥—Ä—É–∑–∫–∞..</p>}
                  </p>
                </div>
                <button onClick={() => handleCopy(order || '', 0)} className="text-blue-500">
                  <CopyImage />
                </button>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg relative">
              {showAlert && copyAlertIndex === 2 && (
                <div className="font-semibold text-sm text-grayth absolute top-0 right-0 mr-4">–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞</div>
              )}
              <div className="flex justify-between items-center">
                <div className="">
                  <h2 className="text-base font-normal">–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–¥–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —Å—á—ë—Ç—É</h2>
                  <p className="text-sm mt-2 text-blueth">{card || <p className='text-blue-700 font-bold'>–ó–∞–≥—Ä—É–∑–∫–∞..</p>}</p>
                </div>
                <button onClick={() => handleCopy(card || '', 2)} className="text-blue-500">
                  <CopyImage />
                </button>
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg relative">
              {showAlert && copyAlertIndex === 1 && (
                <div className="font-semibold text-sm text-grayth absolute top-0 right-0 mr-4">–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞</div>
              )}
              <div className="flex justify-between items-center">
                <div className="">
                  <h2 className="text-base font-normal">–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h2>
                  <p className="text-sm mt-2 text-blueth">{orderSum || <p className='text-blue-700 font-bold'>–ó–∞–≥—Ä—É–∑–∫–∞..</p>}</p>
                </div>
                <button onClick={() => handleCopy(orderSum || '', 1)} className="text-blue-500">
                  <CopyImage />
                </button>
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg">
              <div className="">
                <h2 className="text-base font-normal">–û–±—Å–ª—É–∂–∏–≤–∞—é—â–∏–π –±–∞–Ω–∫</h2>
                <p className="text-sm mt-2 text-blueth">{ ' ... ' || <p className='text-blue-700 font-bold'>–ó–∞–≥—Ä—É–∑–∫–∞..</p>}</p>
              </div>
            </div>
          </div>

          <div className="bg-white space-y-4 rounded-lg p-4 md:text-right text-left md:w-[300px] w-[330px] md:mt-0 mt-8">
            <div className="md:space-y-4 space-y-8 text-gray-700">
              <div className="w-full md:p-4">
                <h2 className="text-sm font-normal text-grayth">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
                <p className="text-base mt-1">{formData.name}</p>
              </div>
              <div className="w-full md:p-4">
                <h2 className="text-sm font-normal text-grayth">–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
                <p className="text-base mt-1">{formData.phoneNumber}</p>
              </div>
              <div className="w-full md:p-4">
                <h2 className="text-sm font-normal text-grayth">–ó–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å</h2>
                <div className="flex md:justify-end justify-start">
                  <p className="text-base mt-1">{result || <p className='text-blue-700 font-bold'>–ó–∞–≥—Ä—É–∑–∫–∞..</p>} USDT</p>
                  <TetherImage className="w-5 h-5 ml-2 mt-1.5" />
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="w-full bg-white p-4 mt-4 rounded-lg flex-grow md:w-[1070px] w-[500px] md:max-w-[1070px] max-w-[500px]">
          <div className="text-gray-700">
            <div className="flex align-center items-center md:mb-6 mb-3">
              <img src={RulesImage} alt="RulesImage" className="absolute w-[25px] h-[25px] relative" />
              <h2 className="text-lg font-md ml-3">–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞</h2>
            </div>
            <ul className="md:space-y-3 space-y-3 md:pl-8 w-[100%]">
              {rules.map((rule, index) => (
                <li
                  key={index}
                  className={`bg-gray-form rounded-xl content-center font-sm cursor-pointer md:w-[95%] w-[100%]  ${expandedRule === index ? 'text-purple-700' : 'text-grayth'}`}
                  onClick={() => handleRuleClick(index)}
                >
                  <div className="flex justify-between items-center">
                    <p className={`text-sm font-semibold m-1 ml-4 md:w-[100%] w-[70%] ${expandedRule === index ? 'text-purpleth' : 'text-grayth'}`}>
                      {rule.title}
                    </p>
                    <div className="flex justify-center content-center w-[50px] h-[35px] items-center">
                      <button className={`font-medium text-3xl mb-2 ${expandedRule === index ? 'text-purpleth' : 'text-grayth'}`}>
                        {expandedRule === index ? '-' : '+'}
                      </button>
                    </div>
                  </div>
                  {expandedRule === index && <p className="mb-2 ml-4 text-gray-600">{rule.content}</p>}
                </li>
              ))}
            </ul>
          </div>
        </div>
        <div className="p-4 mt-6 mb-6 pt-6">
          <button
            onClick={handleContinue}
            className="bg-grayth text-white py-2 px-4 rounded-lg hover:bg-purple-950 md:w-[470px] w-[300px] font-medium font-bold h-[50px]">
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </button>
        </div>
        <div className="text-center pb-4 mb-6 md:w-[470px] w-[300px]">
          <p className="text-sm text-grayth">
            <a href="#" className="text-blueth">
              –ü–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            </a>{' '}
            —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ö–æ–º–ø–∞–Ω–∏—è "Paylink" –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç–∞–º —Å–∏—Å—Ç–µ–º—ã, —Ç–∞–∫ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥: –±–∞–Ω–∫–∞–º –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º —É—Å–ª—É–≥ –∏ —Ç–æ–≤–∞—Ä–æ–≤.
          </p>
        </div>
      </div>
    </div>
  );
};

export default PaymentRequest;
